name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master


jobs:
  build-test-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      IMAGE_TAG: ${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Run unit tests
        run: go test ./...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Define image metadata
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "DOCKERHUB_USERNAME secret is required" >&2
            exit 1
          fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "DOCKERHUB_TOKEN secret is required" >&2
            exit 1
          fi
          echo "IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/liatrio-demo" >> "$GITHUB_ENV"

      - name: Build Docker image
        run: docker build -t "$IMAGE_NAME:$IMAGE_TAG" .

      - name: Start application container
        run: docker run -d --name liatrio-demo-ci -p 80:80 "$IMAGE_NAME:$IMAGE_TAG"

      - name: Wait for service
        run: |
          for i in {1..30}; do
            if curl -sf http://127.0.0.1/ > /dev/null; then
              exit 0
            fi
            sleep 1
          done
          docker logs liatrio-demo-ci
          exit 1

      - name: Validate apprentice requirements
        uses: liatrio/github-actions/apprentice-action@master
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Stop application container
        if: always()
        run: docker rm -f liatrio-demo-ci || true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push "$IMAGE_NAME:$IMAGE_TAG"
          docker tag "$IMAGE_NAME:$IMAGE_TAG" "$IMAGE_NAME:latest"
          docker push "$IMAGE_NAME:latest"
